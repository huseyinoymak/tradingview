// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© huseyn_oymak

// Functions  ----------------------------------------------------------------------------------- //
GetHighestSince(cond, series=high) =>
    var float highestValueSince = na
    if cond or series > highestValueSince
        highestValueSince := series
    highestValueSince

GetLowestSince(condition, series=low) =>
    var float lowestValueSince = na
    if condition or series < lowestValueSince
        lowestValueSince := series
    lowestValueSince

IsSessionStart(sessionTime, sessionTimeZone=syminfo.timezone) =>
    inSess = not na(time(timeframe.period, sessionTime, sessionTimeZone))
    inSess and not inSess[1]
// ----------------------------------------------------------------------------------- //

//@version=5
strategy("PHL2 STRATEGY", overlay=true, margin_long=100, margin_short=100)

var string otxt = "Options"
ShowPHL1 = input.bool(true, title="Show/Hide PHL1?", group=otxt)
ShowPHL2 = input.bool(true, title="Show/Hide PHL2?", group=otxt)
Breakout = input.bool(true, title="Breakout Colors?", group=otxt)
InvertCL = input.bool(false, title="Invert Colors?", group=otxt)

res = timeframe.isweekly or timeframe.ismonthly ? "M" : timeframe.isdaily ? "W" : "D"
xHigh = request.security(syminfo.tickerid, res, high, barmerge.gaps_off, barmerge.lookahead_on)
xLow = request.security(syminfo.tickerid, res, low, barmerge.gaps_off, barmerge.lookahead_on)
xClose = request.security(syminfo.tickerid, res, close, barmerge.gaps_off, barmerge.lookahead_on)

sessionA  = IsSessionStart("0900-1700", "GMT+3")
sessionF  = IsSessionStart("0930-1730", "GMT+3")
sessionN  = IsSessionStart("1000-1800", "GMT+3")

isFutures1 = str.contains(syminfo.tickerid, "!")
isFutures2 = str.contains(syminfo.tickerid, str.tostring(year))

var bool YIGIT = na
if str.contains(syminfo.tickerid, "BIST") and (timeframe.period == "D")
    YIGIT := dayofmonth(time) != dayofmonth(time)[1]
else if str.contains(syminfo.tickerid, "BIST") and (timeframe.period == "120" or timeframe.period == "180" or timeframe.period == "240")
    YIGIT := (isFutures1 or isFutures2) ? sessionF : sessionA    
else if str.contains(syminfo.tickerid, "BIST") and (timeframe.multiplier <= 60)
    YIGIT := (isFutures1 or isFutures2) ? sessionF : sessionN    
else
    YIGIT := dayofmonth(time) != dayofmonth(time)[1]

ADAM = ta.valuewhen(YIGIT, xClose, 1)
TX = ta.valuewhen(YIGIT,GetHighestSince(YIGIT,xHigh),1)
RX = ta.valuewhen(YIGIT,GetLowestSince(YIGIT,xLow),1)

PVT1 = (ADAM+RX+TX)/3
r1 = 2*PVT1-RX
s1 = 2*PVT1-TX

PVT2 = ADAM
r2 = PVT2+(TX-RX)/2
s2 = PVT2-(TX-RX)/2

var string gtxt = "Colour Settings"
pvt1_col = input.color(color.blue, "PVT1", inline="p0", group=gtxt)
pvt2_col = input.color(color.orange, "PVT2", inline="p0", group=gtxt)
r1_col = input.color(color.green, "R1", inline="p1", group=gtxt)
s1_col = input.color(color.red, "S1", inline="p1", group=gtxt)
r2_col = input.color(color.green, "R2", inline="p2", group=gtxt)
s2_col = input.color(color.red, "S2", inline="p2", group=gtxt)
box_up_col = input.color(color.green, "Box-Up", inline="p3", group=gtxt)
box_down_col = input.color(color.orange, "Box-Down", inline="p3", group=gtxt)
invertr_col = input.color(color.red, "Resistance Zone", inline="p4", group=gtxt)
inverts_col = input.color(color.green, "Support Zone", inline="p4", group=gtxt)

i_style = input.string("Line", title="Line Type", inline="Line", group="Line Settings", options = ["Line", "Cross", "Circle"])
l_style = i_style == "Cross" ? plot.style_cross : i_style == "Circle" ? plot.style_circles : plot.style_line
i_width = input.int(1, title="Linewidth", inline="Line", group="Line Settings", options = [1, 2, 3, 4])

pvt1_p=plot(ShowPHL1 ? PVT1 : na, title="PVT1", color=pvt1_col, linewidth=2)
pvt1_r1=plot(ShowPHL1 ? r1 : na, title="R1", color=color.new(r1_col,50), linewidth=i_width, style=l_style)
pvt1_s1=plot(ShowPHL1 ? s1 : na, title="S1", color=color.new(s1_col,50), linewidth=i_width, style=l_style)

pvt2_p=plot(ShowPHL2 ? PVT2 : na, title="PVT2", color=pvt2_col, linewidth = 2)
pvt2_r2=plot(ShowPHL2 ? r2 : na, title="R2", color=color.new(r2_col,50), linewidth=i_width, style=l_style)
pvt2_s2=plot(ShowPHL2 ? s2 : na, title="S2", color=color.new(s2_col,50), linewidth=i_width, style=l_style)

fill(pvt1_p, pvt2_p, color= Breakout ? ((ShowPHL1 and close > PVT1) and (ShowPHL2 and close > PVT2)) ? color.new(color.green, 50) : color.new(color.orange,50) : PVT2 > PVT1 ? color.new(box_up_col,50) : color.new(box_down_col,50))
fill(pvt1_r1, pvt2_r2, color= InvertCL ? color.new(invertr_col, 90) : na)
fill(pvt1_s1, pvt2_s2, color= InvertCL ? color.new(inverts_col, 90) : na)

MA = ta.sma(close,1)
WillR = (ta.highest(high,3)-close)/(ta.highest(high,3)-ta.lowest(low,3)) * -100

longCondition = MA > PVT2 and MA > PVT1 and WillR > -20
if (longCondition)
    strategy.entry("AL", strategy.long, 1000)

shortCondition = MA < PVT2 and MA < PVT1 and WillR < -70
if (shortCondition)
    strategy.close("AL", "FLAT", 1000)
